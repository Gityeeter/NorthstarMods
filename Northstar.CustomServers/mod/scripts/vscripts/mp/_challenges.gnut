global function InitChallenges
global function SetPlayerChallengeEvacState 					//Hooked in _evac.gnut
global function SetPlayerChallengeMatchWon 						//Hooked in _score.nut
global function SetPlayerChallengeMatchComplete					//Hooked in _score.nut
global function SetPlayerChallengeSquadLeader					//Hooked in _gamestate_mp.nut
global function SetPlayerChallengeMeritScore					//Up to gamemodes to use this
global function IncrementPlayerChallengeTitanLeveledUp			//Hooked in titan_xp.gnut
global function IncrementPlayerChallengeWeaponLeveledUp			//Hooked in weapon_xp.gnut
global function IncrementPlayerChallengeFactionLeveledUp		//Hooked in faction_xp.gnut (invisible but necessary for post-summary menu)
global function RegisterChallenges_OnMatchEnd					//Hooked in _gamestate_mp.gnut
global function MatchChallenges_SetHappyHourActive				//Quite sure this is called from Network code, which Northstar currently don't have

struct player_challenges{
	int playerTitanLevelUp
	int playerWeaponLevelUp
	int playerTotalMeritCount
}

struct
{
	table<entity,player_challenges> PlayerChallengesAssigned
	bool isHappyHourActive
} file






/*=============================================================================================================
  __  __         _         _        ____  _             _  _                                
 |  \/  |  __ _ | |_  ___ | |__    / ___|| |__    __ _ | || |  ___  _ __    __ _   ___  ___ 
 | |\/| | / _` || __|/ __|| '_ \  | |    | '_ \  / _` || || | / _ \| '_ \  / _` | / _ \/ __|
 | |  | || (_| || |_| (__ | | | | | |___ | | | || (_| || || ||  __/| | | || (_| ||  __/\__ \
 |_|  |_| \__,_| \__|\___||_| |_|  \____||_| |_| \__,_||_||_| \___||_| |_| \__, | \___||___/
                                                                           |___/            
=============================================================================================================*/

void function InitChallenges()
{
#if (UI && CLIENT)

	SCB_SetCompleteMeritState( 2 )
	SCB_SetEvacMeritState( 2 )
	SCB_SetMeritCount( 2 )
	SCB_SetScoreMeritState( 2 )
	SCB_SetWinMeritState( 2 )
	SCB_SetWeaponMeritCount( -1 )
	SCB_SetTitanMeritCount( -1 )
	
#elseif (SERVER && MP)

	AddCallback_OnClientConnected( SetupPlayerMenuChallenges )
	AddCallback_OnClientDisconnected( RemovePlayerFromChallengePool )
	
#endif
}

void function MatchChallenges_SetHappyHourActive()
{
	file.isHappyHourActive = true
}

void function SetupPlayerMenuChallenges( entity player )
{
	player_challenges challenges
	file.PlayerChallengesAssigned[player] <- challenges
	
	Remote_CallFunction_UI( player, "SCB_SetCompleteMeritState", 0 )
	Remote_CallFunction_UI( player, "SCB_SetMeritCount", 0 )
	Remote_CallFunction_UI( player, "SCB_SetScoreMeritState", 0 )
	Remote_CallFunction_UI( player, "SCB_SetWinMeritState", 0 )
	Remote_CallFunction_UI( player, "SCB_SetWeaponMeritCount", 0 )
	Remote_CallFunction_UI( player, "SCB_SetTitanMeritCount", 0 )
}

void function RemovePlayerFromChallengePool( entity player )
{
	if( player in file.PlayerChallengesAssigned )
		delete file.PlayerChallengesAssigned[ player ]
}

void function RegisterChallenges_OnMatchEnd()
{
	if( file.isHappyHourActive )
	{
		foreach( player in GetPlayerArray() )
		{
			AddPlayerScore( player, "HappyHourBonus" )
			player.SetPersistentVar( "xp_match[" + XP_TYPE.HAPPY_HOUR + "]", 5 ) //The XP Given from Happy Hour Score is 5 merits
		}
	}
}






/*=============================================================================================================
   ____                                                _            _   _                _         
  / ___|  __ _  _ __ ___    ___  _ __ ___    ___    __| |  ___     | | | |  ___    ___  | | __ ___ 
 | |  _  / _` || '_ ` _ \  / _ \| '_ ` _ \  / _ \  / _` | / _ \    | |_| | / _ \  / _ \ | |/ // __|
 | |_| || (_| || | | | | ||  __/| | | | | || (_) || (_| ||  __/    |  _  || (_) || (_) ||   < \__ \
  \____| \__,_||_| |_| |_| \___||_| |_| |_| \___/  \__,_| \___|    |_| |_| \___/  \___/ |_|\_\|___/
                                                                                                   
=============================================================================================================*/

void function SetPlayerChallengeEvacState( entity player, bool successEvac )
{
	if( successEvac )
	{
		file.PlayerChallengesAssigned[player].playerTotalMeritCount += 1
		Remote_CallFunction_UI( player, "SCB_SetEvacMeritState", 1 )
		player.SetPersistentVar( "xp_match[" + XP_TYPE.EVAC + "]", 1 )
		Remote_CallFunction_UI( player, "SCB_SetMeritCount", file.PlayerChallengesAssigned[player].playerTotalMeritCount )
	}
	else
		Remote_CallFunction_UI( player, "SCB_SetEvacMeritState", -1 )
}

void function SetPlayerChallengeMatchWon( entity player, bool playerWon )
{
	if( playerWon )
	{
		file.PlayerChallengesAssigned[player].playerTotalMeritCount += 1
		Remote_CallFunction_UI( player, "SCB_SetWinMeritState", 1 )
		player.SetPersistentVar( "xp_match[" + XP_TYPE.MATCH_VICTORY + "]", 1 )
		player.SetPersistentVar( "matchWin", true )
		Remote_CallFunction_UI( player, "SCB_SetMeritCount", file.PlayerChallengesAssigned[player].playerTotalMeritCount )
	}
	else
		Remote_CallFunction_UI( player, "SCB_SetWinMeritState", -1 )
}

void function SetPlayerChallengeMatchComplete( entity player )
{
	file.PlayerChallengesAssigned[player].playerTotalMeritCount += 1
	Remote_CallFunction_UI( player, "SCB_SetCompleteMeritState", 1 )
	player.SetPersistentVar( "xp_match[" + XP_TYPE.MATCH_COMPLETED + "]", 1 )
	player.SetPersistentVar( "matchComplete", true )
	Remote_CallFunction_UI( player, "SCB_SetMeritCount", file.PlayerChallengesAssigned[player].playerTotalMeritCount )
}

void function SetPlayerChallengeSquadLeader( entity player )
{
	Remote_CallFunction_NonReplay( player, "ServerCallback_SquadLeaderDoubleXP" )
	Remote_CallFunction_NonReplay( player, "ServerCallback_SquadLeaderBonus", player.GetEncodedEHandle() )
	Player_GiveDoubleXP( player, 1 )
	foreach( entity teamplayer in GetPlayerArrayOfTeam( player.GetTeam() ) )
	{
		teamplayer.SetPersistentVar( "matchSquadBonus", true )
		if( teamplayer != player )
			Remote_CallFunction_NonReplay( teamplayer, "ServerCallback_SquadLeaderBonus", teamplayer.GetEncodedEHandle() )
	}
}

void function SetPlayerChallengeMeritScore( entity player )
{
	file.PlayerChallengesAssigned[player].playerTotalMeritCount += 1
	Remote_CallFunction_UI( player, "SCB_SetScoreMeritState", 1 )
	player.SetPersistentVar( "xp_match[" + XP_TYPE.SCORE_MILESTONE + "]", 1 )
	player.SetPersistentVar( "matchScoreEvent", true )
	Remote_CallFunction_UI( player, "SCB_SetMeritCount", file.PlayerChallengesAssigned[player].playerTotalMeritCount )
}

void function IncrementPlayerChallengeTitanLeveledUp( entity player )
{
	file.PlayerChallengesAssigned[player].playerTitanLevelUp++
	file.PlayerChallengesAssigned[player].playerTotalMeritCount += 1
	
	Remote_CallFunction_UI( player, "SCB_SetTitanMeritCount", file.PlayerChallengesAssigned[player].playerTitanLevelUp )
	Remote_CallFunction_UI( player, "SCB_SetMeritCount", file.PlayerChallengesAssigned[player].playerTotalMeritCount )
}

void function IncrementPlayerChallengeWeaponLeveledUp( entity player )
{
	file.PlayerChallengesAssigned[player].playerWeaponLevelUp++
	file.PlayerChallengesAssigned[player].playerTotalMeritCount += 1
		
	Remote_CallFunction_UI( player, "SCB_SetWeaponMeritCount", file.PlayerChallengesAssigned[player].playerWeaponLevelUp )
	Remote_CallFunction_UI( player, "SCB_SetMeritCount", file.PlayerChallengesAssigned[player].playerTotalMeritCount )
}

void function IncrementPlayerChallengeFactionLeveledUp( entity player )
{
	file.PlayerChallengesAssigned[player].playerTotalMeritCount += 1
	Remote_CallFunction_UI( player, "SCB_SetMeritCount", file.PlayerChallengesAssigned[player].playerTotalMeritCount )
}