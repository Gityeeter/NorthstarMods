global function Spotting_Init 

void function Spotting_Init()
{
	AddClientCommandCallback( "pingspot", ClientCommandCallbackPingSpot )
}

bool function ClientCommandCallbackPingSpot( entity player, array<string> args )
{
	if( !IsAlive( player ) || !GamePlaying() )
		return true
	
	entity spottedEnemy
	array<VisibleEntityInCone> results = FindVisibleEntitiesInCone( player.EyePosition(), player.GetViewVector(), 16384, 8, [player], TRACE_MASK_PLAYERSOLID | TRACE_MASK_BLOCKLOS, VIS_CONE_ENTS_TEST_HITBOXES, player )
	foreach( result in results )
	{
		entity visibleEnt = result.ent

		if ( !IsAlive( visibleEnt ) )
			continue

		if ( visibleEnt.IsPhaseShifted() )
			continue
		
		if ( visibleEnt.GetTeam() == player.GetTeam() )
			continue
		
		if( visibleEnt.IsTitan() || visibleEnt.IsPlayer() )
		{
			spottedEnemy = visibleEnt
			break
		}

		spottedEnemy = visibleEnt
		break
	}
	
	vector spotToPing = < 0, 0, 0 >
	if( IsAlive( spottedEnemy ) )
	{
		#if BATTLECHATTER_ENABLED
		if ( !player.IsTitan() )
			PlayBattleChatterLine( player, "bc_pPulseBladeSpotEnemy" ) // Use Pulse Blade's speech about revealing enemies
		#endif
		
		thread HighlightEnemyForPing( spottedEnemy )
		spotToPing = spottedEnemy.GetOrigin()
	}
	
	else
	{
		vector origin = player.EyePosition()
		vector angles = player.EyeAngles()
		vector forward = AnglesToForward( angles )
		TraceResults traceResult = TraceLine( origin, origin + forward * 16384, [], TRACE_MASK_PLAYERSOLID | TRACE_MASK_BLOCKLOS, TRACE_COLLISION_GROUP_NONE )
		spotToPing = traceResult.endPos
	}
	
	if( spotToPing == < 0, 0, 0 > )
		return true
	
	Minimap_PingForTeam( player.GetTeam(), spotToPing, 160.0, 5.0, TEAM_COLOR_FRIENDLY / 255.0, 8, true )
	
	foreach( entity player in GetPlayerArrayOfTeam( player.GetTeam() ) )
	{
		EmitSoundOnEntityOnlyToPlayer( player, player, "skyway_scripted_bombardment_ping" )
		EmitSoundOnEntityOnlyToPlayer( player, player, "skyway_scripted_bombardment_ping" )
	}
	
	return true
}

void function HighlightEnemyForPing( entity markedEnemy )
{
	if( !IsAlive( markedEnemy ) )
		return
	
	markedEnemy.EndSignal( "OnDestroy" )
	markedEnemy.EndSignal( "OnDeath" )
	
	Highlight_SetEnemyHighlight( markedEnemy, "sp_objective_entity" )
	markedEnemy.Highlight_SetParam( 2, 0, HIGHLIGHT_COLOR_ENEMY )
	
	wait 3.0
	
	Highlight_ClearEnemyHighlight( markedEnemy )
}